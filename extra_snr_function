#! /usr/bin/env python3

'''
Written by Oleksandra Rebrysh.
'''

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import glob
from scipy.interpolate import CubicSpline
from astropy.modeling.fitting import LevMarLSQFitter, LinearLSQFitter
from astropy.modeling import models
from astropy import units as u
import lineid_plot

def LoadData(filename):

    df = pd.read_csv(filename, skiprows = 437, sep = '\t', header = None)
    #print(df)

    df.columns = ['wavelength', 'intensity']
    # Remove commas and convert to numeric values for each relevant column
    df['wavelength'] = pd.to_numeric(df['wavelength'].str.replace(',', '.'))
    df['intensity'] = pd.to_numeric(df['intensity'].str.replace(',', '.'), downcast='float')



    return df

def LoadAttenuation(filename):

    df = pd.read_csv(filename, skiprows = 1, sep = '\t', header = None)
    #print(df)

    df.columns = ['wavelength', 'intensity']
    # Remove commas and convert to numeric values for each relevant column
    df['wavelength'] = pd.to_numeric(df['wavelength'])
    df['intensity'] = pd.to_numeric(df['intensity'], downcast='float')

    return df

def CalcAttenuation(spectra,attenuation,cs):

    # Calculate attenuation correction over the wavelength range
    processed_df = spectra.copy()
    attenuation_corrwave = cs(spectra['wavelength'].values)  # Interpolated attenuation (dB/km)

    # Convert attenuation to transmission efficiency
    transmission = np.power(10, -(attenuation_corrwave /1000) / 10)

    
    # # Plot Attenuation and Transmission
    # fig, ax2 = plt.subplots(figsize=(10, 8))


    # # Transmission plot (shared x-axis, secondary y-axis)
    # ax2.plot(wavelength_spectra, transmission, color='orange', label='Transmission Efficiency')
    # ax2.set_ylabel('Transmission Efficiency', color='orange')
    # ax2.tick_params(axis='y', labelcolor='orange')

    # # Add grid and legend
    # fig.tight_layout()
    # fig.legend(loc="upper right")
    # plt.grid(True)
    # plt.show()
    
    # Apply correction to spectra
    processed_df['intensity'] = spectra['intensity'].values / transmission
    # print(Corrected_spectra)

    
    # Plot original and corrected spectra
    fig, ax = plt.subplots(figsize=(10, 8))
    ax.plot(processed_df['wavelength'], processed_df['intensity'], label='Corrected Spectra', color='green')
    ax.plot(processed_df['wavelength'], spectra['intensity'].values, label='Original Spectra', color='red')
    ax.set_xlabel('Wavelength')
    ax.set_ylabel('Intensity')
    ax.legend()
    ax.grid(True)
    plt.title("Original vs Corrected Spectra")
    plt.show()
    



    return processed_df

def LoadAllSpectra(path, common_part, attenuation_calc= True):
    # Use glob to find all files matching the pattern
    pattern = path + common_part + '*.txt'
    files = glob.glob(pattern)

    # Load each file into a DataFrame and store in a list
    spectra = []
    for filename in files:

        aux = LoadData(filename)
        if attenuation_calc:
            df = CalcAttenuation(aux,attenuation,cs)
        else:
            df=aux
        spectra.append(df)

    

    return spectra

def AverageSpectra(spectra):
    '''
    Please have your spectra in the following form:
    spectra = [spectrum1,
                spectrum2]
    '''

    combined_spectra = pd.concat(spectra)
    average_spectra = combined_spectra.groupby('wavelength', as_index=False)['intensity'].mean()

    return average_spectra

def StandardDeviationSpectra(spectra):
    '''
    Please have your spectra in the following form:
    spectra = [spectrum1,
                spectrum2]
    '''

    combined_spectra = pd.concat(spectra)
    std_spectra = combined_spectra.groupby('wavelength', as_index=False)['intensity'].std()

    return std_spectra

def ProcessDataEach(rawdata, background, dark, subtract_background = False, subtract_dark = False):
    #required_columns = ['wavelength', 'intensity']

    ## Check if input data frames are valid
    #for df in [background, dark, *rawdata]:
        #if not isinstance(df, pd.DataFrame) or set(df.columns) != set(required_columns):
            #raise ValueError("Invalid input data frame format or columns.")

    ## Check if input data frames have the same length
    #background_length = len(background)
    #dark_length = len(dark)
    #if any(len(data) != background_length or len(data) != dark_length for data in rawdata):
        #raise ValueError("Input data frames must have the same length.")

    processed_data = []

    # Subtract background and dark from each raw data spectrum
    for data in rawdata:
        processed_df = data.copy()
        if subtract_background:
            processed_df['intensity'] -= background['intensity'].values
        if subtract_dark:
            processed_df['intensity'] -= dark['intensity'].values
        #processed_df['intensity'] = processed_df['intensity'].clip(lower=0)  # Ensure non-negative intensities
        processed_data.append(processed_df)

    return processed_data

def CalcSNRData(sum_data, sigma_dark, sigma_background,subtract_background = False, subtract_dark = False,plot_snr=False):
    #required_columns = ['wavelength', 'intensity']

    ## Check if input data frames are valid
    #for df in [background, dark, *rawdata]:
        #if not isinstance(df, pd.DataFrame) or set(df.columns) != set(required_columns):
            #raise ValueError("Invalid input data frame format or columns.")

    ## Check if input data frames have the same length
    #background_length = len(background)
    #dark_length = len(dark)
    #if any(len(data) != background_length or len(data) != dark_length for data in rawdata):
        #raise ValueError("Input data frames must have the same length.")




    wavelength = sum_data.loc[:, 'wavelength'].values
    intensity = sum_data.loc[:, 'intensity'].values

    # Add all background and dark contributions for each spectrum
    noise_aux=0

    processed_df = sum_data.copy()
    if subtract_background:
        noise_aux = sigma_background['intensity'].values**2 

    # print(noise_aux)
    if subtract_dark:
        noise_aux += sigma_dark['intensity'].values**2
    # print(noise_aux)
    noise_aux += processed_df['intensity'].values
    # print(noise_aux)
    snr = processed_df['intensity'].values/np.sqrt(noise_aux)
    #processed_df['intensity'] = processed_df['intensity'].clip(lower=0)  # Ensure non-negative intensities

    if plot_snr:
        fig, ax = plt.subplots(2, 1, figsize=(10, 8))

        ax[0].plot(wavelength, snr,label= 'SNR')

        ax[0].minorticks_on()
        ax[0].xaxis.set_minor_locator(plt.MultipleLocator(10))
        ax[0].grid(True, 'both')
        ax[0].set_xlabel(f'Wavelength, nm')
        ax[0].set_ylabel(f'SNR')
        ax[0].set_title('Signal to Noise Ratio')
        ax[0].legend()

        
        print(sigma_dark)
        ax[1].plot(wavelength,sigma_background['intensity'].values,label='Background Noise')
        ax[1].plot(wavelength,sigma_dark['intensity'].values,label='Dark Noise')
        ax[1].plot(wavelength, np.sqrt(processed_df['intensity'].values),label= 'Spectra Noise')
        ax[1].plot(wavelength, np.sqrt(noise_aux),label= 'Total Noise')

        ax[1].minorticks_on()
        ax[1].xaxis.set_minor_locator(plt.MultipleLocator(10))
        ax[1].grid(True, 'both')
        ax[1].set_xlabel(f'Wavelength, nm')
        ax[1].set_ylabel(f'Intensity, counts')
        ax[1].set_title('Noise Contributors')
        ax[1].legend()


        plt.show()



    return snr

def ProcessData(rawdata, background, dark):
    # Ensure the dataframes have the expected columns
    required_columns = ['wavelength', 'intensity']

    for df in [rawdata, background, dark]:
        if df.shape[1] != 2:
            print(f'ERROR EXCEPTION: Data should have exactly two columns')
            return None
        df.columns = required_columns

    # Ensure the lengths of the dataframes match
    if not (rawdata.shape[0] == background.shape[0] == dark.shape[0]):
        print(f'ERROR EXCEPTION: Data should have the same length')
        return None

    # Process the data
    processed_data = rawdata.copy()
    processed_data['intensity'] = rawdata['intensity'] - background['intensity'] - dark['intensity']

    return processed_data

def AddSpectra(spectra):

    '''
    Please have your spectra in the following form:
    spectra = [spectrum1,
                spectrum2]
    '''

    combined_spectra = pd.concat(spectra)
    summed_spectra = combined_spectra.groupby('wavelength', as_index=False)['intensity'].sum()
    #print(summed_spectra)
    return summed_spectra

def PlotData(ax, data, name, labelname):
    #print(data)
    wavelength = data.loc[:, 'wavelength']
    intensity = data.loc[:, 'intensity']
    ax.plot(wavelength, intensity, label = labelname)
    ax.minorticks_on()
    ax.xaxis.set_minor_locator(plt.MultipleLocator(10))
    ax.grid(True, 'both')
    ax.set_xlabel(f'Wavelength, nm')
    ax.set_ylabel(f'Intensity, counts')
    ax.set_title(name)
    ax.legend()

    return

def DefSpectrumForLines(spectr, minwavelength, maxwavelength):

    wavelength = sum_spectra.loc[:, 'wavelength'].values
    intensity = sum_spectra.loc[:, 'intensity'].values

    mask = (wavelength >= minwavelength) & (wavelength <= maxwavelength)
    wavelength_truncated = wavelength[mask]
    intensity_truncated = intensity[mask]
    # spectrum = Spectrum1D(flux=intensity_truncated*u.adu, spectral_axis=wavelength_truncated*u.nm)


    return wavelength_truncated, intensity_truncated

def FitContinuum(degree, wavelength, intensity, image = False):

    chebyshev_model = models.Chebyshev1D(degree=degree)
    fitter = LinearLSQFitter()
    g1_fit = fitter(chebyshev_model, wavelength, intensity)
    spec_norm = (intensity - g1_fit(wavelength))/np.linalg.norm(intensity - g1_fit(wavelength))

    if image == True:
        fig, ax = plt.subplots(2, 1, figsize=(10, 8))
        ax[0].plot(wavelength, intensity, label='Original Spectrum')
        ax[0].plot(wavelength, g1_fit(wavelength), label='Fitted Continuum')
        ax[0].set_title('Continuum Fitting')
        ax[0].legend()
        ax[0].grid(True)

        # ax[1].plot(wavelength_truncated, spec_norm.flux)
        ax[1].plot(wavelength, spec_norm)
        ax[1].set_title('Continuum Normalized Spectrum')
        ax[1].grid(True)

    return spec_norm

def DetectAndPlotLines(spectra, wavelength, spectral_lines, telluric_lines, threshold, title = None, save = False, path = None, name = None):

    detected_lines = {}
    telluric_lines_d = {}

    # Step 4: Check for each line if its depth/strength exceeds the threshold
    for line_name, line_wavelength in spectral_lines.items():
        index = np.argmin(np.abs(wavelength_truncated - line_wavelength))
        flux = spectra[index]
        depth = - flux
        if depth >= threshold:
            if flux < spectra[index - 10] and flux < spectra[index + 10]:
                detected_lines[line_name] = line_wavelength

    for line_wavelength in telluric_lines["TL"]:
        index = np.argmin(np.abs(wavelength_truncated - line_wavelength))
        flux = spectra[index]
        depth = - flux
        if depth >= 0.02:
            if flux < spectra[index - 1] and flux < spectra[index + 1]:
                telluric_lines_d[line_wavelength] = line_wavelength

    fig, ax = lineid_plot.plot_line_ids(
        wavelength_truncated,
        spectra,
        list(detected_lines.values()) + list(telluric_lines_d.values()),  # Flux values of detected lines
        list(detected_lines.keys()) + ["TL"]*len(telluric_lines_d),    # Names of detected lines
        max_iter = 100)
    fig.set_size_inches(12, 6)
    num_detected_lines = len(detected_lines)  # Count of detected lines
    num_telluric_lines = len(telluric_lines_d)  # Count of telluric lines

    for index in range(num_detected_lines+1, num_detected_lines + num_telluric_lines+1):
        line = ax.lines[index]
        line.set_color("red")
        line.set_linestyle("--")

    for text in ax.texts:
        if text.get_text() == "TL":  # Target labels with "TL"
            text.set_visible(False)
        if text.get_text() != "TL":  # Ignore telluric lines
            text.set_y(text.get_position()[1] + 0.005)

    ax.set_xlabel('Wavelength, nm')
    ax.set_ylabel('Normalised flux')
    tl = mpl.lines.Line2D([], [], color='r', linestyle = '--')
    ax.legend([tl], ['Telluric line'])
    ax.set_title(title, y = 1.2, fontweight="bold")
    if save:
        plt.savefig(path+name, dpi = 600)


    return

if __name__ == '__main__':

    path = ''
    savefold = ''

    spectral_lines = {
    "Hα": 656.3,
    "Hβ": 486.1,
    "Hγ": 434.0,
    "Hδ": 410.2,
    "He II": 420.0,
    "He II": 454.1,
    "He I": 447.1,
    "He I": 402.6,
    "He I": 667.8,
    "Fe I": 495.8,
    "Fe I": 466.8,
    "Fe I": 438.4,
    "Ca I": 420.8,
    "Fe I": 527.0,
    "Fe II": 516.90,
    "Mg I": 518.0,
    "Na I D1": 589.00,
    "Na I D2": 589.60,
    "Ca II H": 396.85,
    "Ca II K": 393.37,
    "Ca II IR 1": 849.80,
    "Ca II IR 2": 854.20,
    "Ca II IR 3": 866.20,
    "[O I] 1": 630.0,
    "[O I] 2": 636.4,
    "C II": 426.7,
    "Si II": 412.8,
    "Si II": 634.7,
    "Si II": 637.1,
    "Mg II": 448.1,
    "O I": 898.8,
    "O I": 822.7,
    "O I": 759.4,
    "O I": 686.7,
    "O I": 627.7,
    "O I": 777.1,
    "O I": 777.4,
    "O I": 777.5,
    "He I": 587.6,
    "Ti II": 336.1,
    "Ni I": 299.4,
    "TiO": 476.1,
    "TiO": 495.4,
    "TiO": 516.7
    }

    telluric_lines = {"TL":
    [687.8,
     718.5,
     719.4,
     725.0,
    759.3,  # O2 (760.0 nm region)
    760.5,
    761.0,  # O2 (760.5 nm region)
    762.0,  # O2 (762.0 nm region)
    764.0,  # H2O (763.0-764.0 nm region)
    820.5,  # H2O (820.0-821.0 nm region)
    822.2,  # H2O (822.0 nm region)
    935.0,  # H2O (934.0-935.0 nm region)
    940.0,  # H2O (940.0 nm region)
    942.0,  # H2O (942.0 nm region)
    940.5,  # H2O (940.5 nm region)
    943.0,  # H2O (943.0 nm region)
    946.0,  # H2O (946.0 nm region)
    953.0,  # H2O (953.0 nm region)
    960.0,  # H2O (960.0 nm region)
]}


#Load Fiber Attenuation Data
attenuation = LoadAttenuation('attenuation.txt')

# Interpolate the data in height to get a smooth function
x = attenuation['wavelength'].values
y = attenuation['intensity'].values
# print(y)

cs = CubicSpline(x, y)





####
#For one star
# Arcturus_spectrum_* , taken 3s
# Arcturus_background, taken ?
# flat *
# dark_3s_
####

threshold=0.02

Spectra = LoadAllSpectra('Asiago23052024/Arcturus/','Arcturus_spectrum')


#Load Darks, calculate average and Std
Dark = LoadAllSpectra('Asiago23052024/dark/','dark_3s')
Std_dark = StandardDeviationSpectra(Dark)
Master_dark = AverageSpectra(Dark)

#Load Backgrounds, subtract dark from Background, calculate average and std
Background = LoadAllSpectra('Asiago23052024/Arcturus/','Arcturus_background')
Background_subdark = ProcessDataEach(Background,None,Master_dark, False, True)#rawdata, background, dark, subtract_background = False, subtract_dark = False
Std_background = StandardDeviationSpectra(Background_subdark)
Master_background = AverageSpectra(Background_subdark)

#Process data
Spectra_sub = ProcessDataEach(Spectra,Master_background,Master_dark,True,True)
sum_spectra = AddSpectra(Spectra_sub)

#Calculate snr of all spectra summed
Snr_spectra = CalcSNRData(sum_spectra,Std_dark, Std_background,True, True)

#Calculate snr of only one spectra summed
# Snr_spectra = CalcSNRData(Spectra[0],Std_dark, Std_background,True, True)

wavelength = sum_spectra.loc[:, 'wavelength'].values
intensity = sum_spectra.loc[:, 'intensity'].values

wavelength_truncated, intensity_truncated = DefSpectrumForLines(sum_spectra, 360, 1100)

spec_norm = FitContinuum(15, wavelength_truncated, intensity_truncated, image = True)




DetectAndPlotLines(spec_norm, wavelength_truncated, spectral_lines, telluric_lines, threshold, title = 'HR6212, ζ Herculis [m(V) = 2.81]', save = True, path = savefold, name = "HR6212_spectrum_lines.png")

fig, axs = plt.subplots(2, 1, figsize=(8, 8))
PlotData(axs[0], Spectra[0], 'HR6212', 'HR6212 raw data')
PlotData(axs[0], Master_background, 'HR6212', 'background')
PlotData(axs[0], Master_dark, 'HR6212, ζ Herculis [m(V) = 2.81]', 'dark')
PlotData(axs[1], sum_spectra, None, 'HR6212 processed data')
plt.tight_layout()
plt.show()

# plt.savefig(f'/media/astronomer/Transcend/PhD/oceanview/Spectra_stars/HR6212.png', dpi = 600)

fig, axs = plt.subplots(1, 1, figsize=(12, 8))
PlotData(axs, sum_spectra, 'HR6212, ζ Herculis [m(V) = 2.81]', 'HR6212 processed data')
# plt.savefig(f'D:\PhD\Oceanview\Spectra_stars\\HR6212_spectrum.png', dpi = 600)
plt.show()

